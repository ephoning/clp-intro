#+STARTUP: showall
* Introduction to core.logic

** Logic Programming

- Prolog style programming *(not covered)*
- Constraint logic programming *(intro)*
- Nominal logic programming *(not covered)*
- Mixing functional with core.logic relational programming *(intro)*

*** Constraint logic programming *(intro)*

Backward execution:

- regular functional:
#+BEGIN_SRC Clojure
(cons 1 '(2 3))  ->  '(1 2 3)
#+END_SRC
- CLP:
#+BEGIN_SRC Clojure
(conso 1 _ '(1 2 3))   ->  _ unifies with '(2 3)
#+END_SRC

**** How And When To Use?

Unlikely "in isolation"; more likely embedded within regular Clojure code.
Therefore:

- How to combine / compose with regular functions?
     - calling CLP functions from within regular functions
     - calling regular functions from within CLP functions
- Also: how to compose CLP functions themselves?

**** The main concepts / operators

- run* / run <n>
     - interface to regular Clojure
- lvar
     - logical variable
- ==
     - unification
- fresh
     - introduction of new lvars
- conde
     - try every alternative
- lvaro, nonlvaro
     - non-relational goals ("predicates")

**** Examples

- Peano number addition:
      - ***see code...***
- append
      - 'appendo' is built-in, but can we define it ourselves in terms of other o-primitives
      - ***see code...***

**** Some Learnings

- relational operators do not return values; pass in lvar argument to unify with result instead
- relational operator are more like actions ("hidden side-effects"), so do not nest but provide one after the other
- negation is often tricky (we need it when trying to have 'conde' behave more like 'cond')
- ordering of invocations of relational operators is irrelevant (BUT might cause non-termination!)
    - hint: make sure to order clauses in a run* or fresh body such that a recursive call comes last
- cannot use sequence functions to extract parts of a value, but we can use "constructors"
    - most notably: (l)cons (tries to unify an lvar with a dotted pair / improper list)
- in short: relations do NOT behave like regular functions; they "communicate" through the lvars introduced by run* or fresh
- strategy considerations: do we want to expose "quantifiers" to the "outside" Clojure world OR only expose "regular value instances"?

**** Questions

- Given a function, is it "easy" (*) to derive the CLP-equivalent?
- Given a non-primitive function F based on primitive P, does that imply that
  CLP-F is also non-primitive and can be expressed using a CLP-P?

- How about Integer / Float arithmetic?
    - Integer is *countable infinite*, so at least a lazy approach could work
    - Float is *uncountable infinite*, so no go
    - or are we restricted to types with *GROUNDED VALUES* / algebraic types?
      (seem that way, no?: see core.logic.arithmetic: ONLY provides comparison operators for numbers - to be used as predicates/tests within run* / fresh bodies)
(*) Easy: we can think of a simple recipe to get from a functional to CLP equivalent implementation

*** Mixing functional with core.logic relational programming *(intro)*

**** Calling functions from relations

fine, but make sure to recognize the difference between vars and lvars

**** Calling relations from functions

see the approach as implemented in peano.clj

**** Bare-bones usage

***** Minikanren / core.logic.unifier versus clojure.core.unify

Caveat: core.logic wiki incorrect (or outdated?) on some of the syntax as used in the examples. For example:
#+BEGIN_SRC Clojure
(unifier '(?x ?y ?z) '(1 2 ?y)) ; (1 2 _.0)
#+END_SRC
should be:
#+BEGIN_SRC Clojure
(unifier ['(?x ?y ?z) '(1 2 ?y)]) ; {?y 2, ?x 1, ?z 2}
#+END_SRC

#+BEGIN_SRC Clojure

=> (require '[clojure.core.logic.unifier :as cclu] '[clojure.core.unify :as ccu])

=> (cclu/unifier ['(?x ?y ?z) '(1 2 ?y)])     ; {?y 2, ?x 1, ?z 2}  <= CORRECT (everything is unifyable)

=> (cclu/unifier ['(?x) '(?x)])               ; {}                  <= CORRECT (no restrictions on '?x')

=> (cclu/unifier ['(?x ?y) '(?x 42)])         ; {?y 42}             <= CORRECT (no restrictions on '?x')

=> (cclu/unifier ['(?x ?x) '(1 2)])           ; nil                 <= CORRECT (value mismatch)

=> (cclu/unifier ['(?x (?x)) '(1 1)])         ; nil                 <= CORRECT (structure mismatch)

=> (cclu/unifier ['(?x 2) '(1 ?y ?z)])        ; nil                 <= CORRECT (structure mismatch)

=> (cclu/unifier ['(?x) '(1 2)])              ; nil                 <= CORRECT (structure mismatch)


=> (ccu/unifier '(?x ?y ?z) '(1 2 ?y))       ; (1 2 2)              <= CORRECT

=> (ccu/unifier '(?x) '(?x))                 ; (?x)                 <= CORRECT

=> (ccu/unifier '(?x ?y) '(?x 42))           ; (?x 42)              <= CORRECT

=> (ccu/unifier '(?x ?x) '(1 2))             ; (1 2)                <= WRONG

=> (ccu/unifier '(?x (?x)) '(1 1))           ; (1 1)                <= WRONG

=> (ccu/unifier '(?x 2) '(1 ?y ?z))          ; (1 2 ?z)             <= WRONG

=> (ccu/unifier '(?x) '(1 2))                ; (1 2)                <= WRONG

#+END_SRC


** To Explore

- https://github.com/clojure/core.logic/wiki/Features
- https://rawgit.com/dedeibel/clojure-core-logic-cheatsheets/master/out/cheatsheet-use-title-attribute-no-cdocs-summary.html
- https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer
- https://www.youtube.com/watch?v=iCuVTGWNU3s
- https://github.com/swannodette/logic-tutorial


(NOTE TO SELF: render this as HTML in browser with: C-c C-e h o)
